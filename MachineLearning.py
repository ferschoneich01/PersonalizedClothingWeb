# -*- coding: utf-8 -*-
"""MachineLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wQ9ucVpzYpSDtUzi9tOfMIe5h-2mdncf
"""


"""# Machine learning
# Importamos librerias a utilizar
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""Importamos nuestro dataset"""

# Importamos librerias

# importamos nuestros dataset
import seaborn as sns
import statsmodels.api as sm
from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker
import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt
from openpyxl.workbook import Workbook
from statsmodels.tsa.seasonal import seasonal_decompose
df_test = pd.read_csv('test_products.csv', header=0)
df_train = pd.read_csv('train_products.csv', header=0)
products = pd.read_csv('products.csv', index_col="mes")

# Vericamos cantidad de datos que hay en el dataset
print('Cantidad de datos: ')
print('========================================')
print(df_train.shape)
print(df_train.shape)
print(df_test.shape)
print(df_test.shape)

# Verificamos los tipos de datos contenidos en el dataset
print('Tipos de datos: ')
print('========================================')
print(df_train.info)
print(df_train.info)
print(df_test.info)
print(df_test.info)

# verificamos los datos faltantes de los dataset
print('Datos faltantes: ')
print('========================================')
print(pd.isnull(df_train).sum())
print(pd.isnull(df_test).sum())
print('')

# verificamos estadisticas del dataset
print('Estadisticas del dataset: ')
print('========================================')
df_train.describe()
df_test.describe()
df_train.head()

# Cambiamos los datos de color a número
df_train['color'].replace(['Negro', 'Blanco', 'Rosado', 'Gris', 'Azul'], [
                          0, 1, 2, 3, 4], inplace=True)
df_test['color'].replace(['Negro', 'Blanco', 'Rosado', 'Gris', 'Azul'], [
    0, 1, 2, 3, 4], inplace=True)
products['color'].replace(['Negro', 'Blanco', 'Rosado', 'Gris', 'Azul'], [
    0, 1, 2, 3, 4], inplace=True)
# Cambiamos los datos de tallas a números
df_train['talla'].replace(['XS', 'S', 'M', 'L', 'XL'], [
                          0, 1, 2, 3, 4], inplace=True)
df_test['talla'].replace(['XS', 'S', 'M', 'L', 'XL'], [
    0, 1, 2, 3, 4], inplace=True)

# Eliminamos las columnas que no son necesarias para el analisis
df_train = df_train.drop(['id', 'producto'], axis=1)
df_test = df_test.drop(['id', 'producto'], axis=1)
# Eliminamos columnas con datos perdidos
df_train.dropna(axis=0, how='any', inplace=True)
df_test.dropna(axis=0, how='any', inplace=True)

"""Verficamos datos"""

# Verificamos datos
print(pd.isnull(df_train).sum())
print(pd.isnull(df_test).sum())
print(df_train.shape)
df_train.head()
print(df_test.shape)
df_test.head()

# MACHINE LEARNING
# Scikit-learn
# Ahora en esta parte comenzamos a impleamentar los algoritmos
# de Maniche Learning como: Algoritmo de Regresion Logística, Vectores de soporte, Vecinos más cercanos.

# Separamos las columnas con la información de las prendas en train y test
X = df_train[['color']]
Y = df_train['mes']

# Separamos los datos de 'train' en entrenamiento y prueba para probar los algoritmos
X_train, X_test, Y_train, Y_test = train_test_split(X.values.reshape(-1, 1),
                                                    Y.values.reshape(-1, 1),
                                                    test_size=0.8,
                                                    random_state=1234,
                                                    shuffle=True)

# Regresion Logística
# Creacion del modelo
# Para no incluir ningun tipo de regularizacion en el modelo se indica
# penalty='none'
Logreg = LogisticRegression(penalty='none')
Logreg.fit(X=X_train.reshape(-1, 1), y=Y_train)
LogisticRegression(penalty='none')
Y_pred = Logreg.predict(X_test)
print('Precisión Regresión Logística: ')
print(Logreg.score(X_train, Y_train))

# Informacion del modelo
print("Intercept:", Logreg.intercept_)
print("Coeficiente: ", list(zip(X.columns, Logreg.coef_.flatten
                                (), )))
print("Accuracy de entrenamiento: ", Logreg.score(X, Y))

# Predicciones probabilisticas
# Con .predict_proba() se obtiene, para cada observacion, la probabilidad predicha
# de pertenecer a las dos clases
predicciones = Logreg.predict_proba(X=X_test)
predicciones = pd.DataFrame(predicciones, columns=Logreg.classes_)
predicciones.head(3)

# El modelo de esta prediccion se corresponde a la clase con mayor probabilidad
predicciones = Logreg.predict(X=X_test)
predicciones

"""## **Representacion Grafica del modelo**"""

# Predicciones en todo el rango de X
# ==============================================================================
# Se crea un vector con nuevos valores interpolados en el rango de observaciones.
grid_X = np.linspace(
    start=min(df_train.color),
    stop=max(df_train.color),
    num=200
).reshape(-1, 1)

grid_X = sm.add_constant(grid_X, prepend=True)
predicciones = Logreg.predict(X=X_test)

# Gráfico del modelo
# ==============================================================================
fig, ax = plt.subplots(figsize=(6, 3.84))

ax.scatter(
    X_train[3:],
    Y_train[3:]
)
ax.scatter(
    X_train[6],
    Y_train[6]
)
ax.plot()
ax.set_title("Modelo regresión logística")
ax.set_ylabel("meses)")
ax.set_xlabel("Colores por mes")

# K neighbors vecinos más cercanos
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, Y_train)
Y_pred = knn.predict(X_test)
print('Precisión Vecinos más Cercanos: ')
print(knn.score(X_train, Y_train))

sns.set()

sns.lmplot(x='mes', y='color', data=df_train)

# Grafica de densidad por color
sns.distplot(df_train['color'])

# Separamos los datos por categoria
# por mes
Enero = df_train['color'][df_train['mes'] == 1]
Febrero = df_train['color'][df_train['mes'] == 2]
Marzo = df_train['color'][df_train['mes'] == 3]
Abril = df_train['color'][df_train['mes'] == 4]

sns.distplot(Enero, label='Enero')
sns.distplot(Febrero, label='Febrero')
sns.distplot(Marzo, label='Marzo')
sns.distplot(Abril, label='Abril')
